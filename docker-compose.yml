version: '3.8'

services:
  # Flask API 服务
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "15000:5000"
    volumes:
      # 挂载整个项目目录，支持热重载
      - .:/app
      # 排除 __pycache__ 和其他不需要的文件
      - /app/__pycache__
      - /app/.pytest_cache
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://postgres:password@db:5432/myapi_dev
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - myapi-network
    restart: unless-stopped
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Tomcat 前端服务
  frontend:
    image: tomcat:10-jdk11-openjdk
    ports:
      - "18080:8080"
    volumes:
      # 挂载前端打包后的静态文件到 Tomcat ROOT 目录
      - /opt/webapp-frontend/dist:/usr/local/tomcat/webapps/ROOT
    environment:
      - CATALINA_OPTS=-Xms256m -Xmx512m
      - JAVA_OPTS=-Djava.awt.headless=true
      # API 服务地址环境变量，前端可以使用
      - API_BASE_URL=http://localhost:15000/api
    depends_on:
      - api
    networks:
      - myapi-network
    restart: unless-stopped
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 数据库服务
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=myapi_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      # 直接挂载数据目录
      - /data/postgres:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    networks:
      - myapi-network
    restart: unless-stopped
    # 健康检查
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    ports:
      - "16379:6379"
    volumes:
      # 直接挂载 Redis 数据目录
      - /data/redis:/data
    networks:
      - myapi-network
    restart: unless-stopped
    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# 网络
networks:
  myapi-network:
    driver: bridge